{"version":3,"sources":["components/NavBar/index.js","components/MainWord/index.js","containers/word.js","components/HangMan/index.js","components/InputWordPopup/index.js","components/EndGamePopup/index.js","components/WrongLetters/index.js","actions/index.js","API.js","components/Game/index.js","containers/game.js","reducers/game.js","reducers/alphabet.js","reducers/index.js","reducers/word.js","reducers/failure.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","Navbar","color","light","expand","NavbarBrand","Nav","className","navbar","NavItem","this","props","owner","Component","MainWord","word","i","length","toRender","letterIndex","indexOf","alphabet","Fragment","key","push","connect","store","bodyParts","deadEyes","HangMan","bodyPartsToDisplay","failures","style","height","InputWordPopup","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","value","handleKeyPress","bind","assertThisInitialized","onOwnerChange","setWord","share","e","newValue","target","setState","replace","shareLink","setOwner","body","ModalBody","InputGroup","Input","id","readOnly","InputGroupAddon","addonType","Button","onClick","document","getElementById","select","execCommand","ModalFooter","size","Label","for","placeholder","name","onKeyPress","onChange","Modal","isOpen","toggle","ModalHeader","EndGamePopup","isWinner","textAlign","corrects","playAgain","newGame","WrongLetters","handleClick","index","preventDefault","_this2","buttons","toConsumableArray","map","el","display","justifyContent","endGame","type","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","database","getGameData","_ref","asyncToGenerator","regenerator_default","mark","_callee","data","wrap","_context","prev","next","ref","once","then","snapshot","val","sent","abrupt","stop","_x","apply","arguments","MAIN_URL","getUrlVars","vars","window","location","href","m","Game","checkForShare","letterClicked","win","gameOver","dispatch","toUpperCase","playing","includes","won","Array","from","indexOfLetter","wrongLetter","_this3","undefined","gameEnded","Math","floor","random","gameData","updates","update","writeNewGame","history","pushState","title","_this4","popup","uniqueLetters","_loop","some","components_EndGamePopup","components_InputWordPopup","Container","Row","Col","xs","components_NavBar","md","containers_word","components_HangMan","components_WrongLetters","game","defaultState","CORRECT","WRONG","getDefaultState","combineReducers","action","objectSpread","newState","slice","createStore","rootReducer","App","es","rel","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0a9c6022.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n  Navbar,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n} from 'reactstrap';\r\nimport './NavBar.css';\r\n\r\nclass NavBar extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar color=\"dark\" light expand=\"md\">\r\n          <NavbarBrand>HangMan Game</NavbarBrand>\r\n          <Nav className=\"ml-auto\" navbar>\r\n            <NavItem>\r\n              Created by {(this.props.owner) ? this.props.owner : \"Guest\"}\r\n            </NavItem>\r\n          </Nav>\r\n        </Navbar>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default NavBar;","import React, { Component } from 'react'\r\nimport \"./MainWord.css\";\r\n\r\nconst alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n\r\nclass MainWord extends Component {\r\n  render() {\r\n    let word = [];\r\n    for (let i = 0; i < this.props.word.length; i++) {\r\n      let toRender;\r\n      let letterIndex = alphabet.indexOf(this.props.word[i]);\r\n      if (this.props.alphabet[letterIndex] === 0) {\r\n        toRender = <React.Fragment key={i}>_</React.Fragment>;\r\n      } else {\r\n        toRender = <React.Fragment key={i}>{this.props.word[i]}</React.Fragment>;\r\n      }\r\n      word.push(toRender);\r\n      if (i % 7 === 0 && i !== 0) word.push(<React.Fragment key={i * 10}><br /></React.Fragment>);\r\n    }\r\n    return (\r\n      <div className=\"main-word\">\r\n        {word}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MainWord;\r\n","import {connect} from \"react-redux\";\r\nimport MainWord from '../components/MainWord/';\r\n\r\nfunction mapStateToProps(store){\r\n    return {\r\n        word: store.word,\r\n        alphabet: store.alphabet\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps) (MainWord);","import React from 'react';\r\nimport './HangMan.css';\r\n\r\nconst bodyParts = [\r\n  <div key={0} className=\"head\" />,\r\n  <div key={1} className='body' />,\r\n  <div key={2} className='left-arm' />,\r\n  <div key={3} className='right-arm' />,\r\n  <div key={4} className='left-leg' />,\r\n  <div key={5} className='right-leg' />\r\n];\r\n\r\nconst deadEyes = [\r\n  <div key={6} className=\"left-eye\">X</div>,\r\n  <div key={7} className=\"right-eye\">X</div>,\r\n];\r\n\r\nconst HangMan = (props) => {\r\n  let bodyPartsToDisplay = [];\r\n  for (let i = 0; i < props.failures; i++) {\r\n    bodyPartsToDisplay.push(bodyParts[i]);\r\n  }\r\n\r\n  if (props.failures === 6) {\r\n    bodyPartsToDisplay.push(deadEyes);\r\n  }\r\n\r\n  return (\r\n    <div style={{ height : \"300px\" }} className=\"full-hangman\">\r\n      <div className=\"hangman\">\r\n        {bodyPartsToDisplay}\r\n      </div>\r\n      <div className=\"platform\">\r\n        <div className=\"base\" />\r\n        <div className='rope' />\r\n        <div className='stick' />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HangMan;","import React, { Component } from 'react'\r\nimport { Button, Input, InputGroup, InputGroupAddon, Label, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport './InputWordPopup.css';\r\n\r\nclass InputWordPopup extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            value: '',\r\n            owner: ''\r\n        };\r\n\r\n        this.handleKeyPress = this.handleKeyPress.bind(this);\r\n        this.onOwnerChange = this.onOwnerChange.bind(this);\r\n        this.setWord = this.setWord.bind(this);\r\n        this.share = this.share.bind(this);\r\n    }\r\n\r\n    handleKeyPress(e) {\r\n        if (e.key === \"Enter\") {\r\n            this.setWord();\r\n        } else {\r\n            let newValue = e.target.value;\r\n            let regex = /((?![A-z]).)*/g;\r\n            if (newValue.length <= 15) {\r\n                this.setState({\r\n                    value: newValue.replace(regex, \"\")\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    onOwnerChange(e) {\r\n        if (e.key === \"Enter\") {\r\n            this.setWord();\r\n        } else {\r\n            let newValue = e.target.value;\r\n            let regex = /((?![A-z0-9]).)*/g;\r\n            if (newValue.length <= 35) {\r\n                this.setState({\r\n                    owner: newValue.replace(regex, \"\")\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    setWord() {\r\n        if (this.state.value === '' && !this.props.shareLink) return;\r\n        this.props.setWord(this.state.value);\r\n        if (this.state.owner !== '') {\r\n            this.props.setOwner(this.state.owner);\r\n        }\r\n    }\r\n\r\n    share() {\r\n        if (this.state.value === '') return;\r\n        this.props.share(this.state.value, this.state.owner);\r\n    }\r\n\r\n    render() {\r\n        let body;\r\n        if (this.props.shareLink) {\r\n            body = <>\r\n                <ModalBody>\r\n                    Send this link to your friends to share your game\r\n                    <br />\r\n                    <InputGroup>\r\n                        <Input id=\"share-link\" value={this.props.shareLink} readOnly />\r\n                        <InputGroupAddon addonType=\"append\"><Button onClick={ () => { document.getElementById(\"share-link\").select(); document.execCommand(\"copy\"); }} color=\"primary\"><i className=\"fas fa-copy\"></i> Copy</Button></InputGroupAddon>\r\n                    </InputGroup>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button size=\"lg\" onClick={ this.setWord } color=\"primary\">Play Now</Button>\r\n                </ModalFooter>\r\n            </>;\r\n        } else {\r\n            body = <>\r\n                <ModalBody>\r\n                    <InputGroup>\r\n                        <Label for=\"word\">Enter the word that the other player has to guess. It has to be a single word, without spaces, numbers or symbols.</Label>\r\n                        <Input placeholder=\"Secret Word\" name=\"word\" onKeyPress={this.handleKeyPress} onChange={this.handleKeyPress} value={this.state.value} />\r\n                    </InputGroup>\r\n                    <br />\r\n                    <Label for=\"owner\">(Optional) Enter your name:</Label>\r\n                    <Input placeholder=\"(Optional) Your name\" name=\"owner\" onKeyPress={this.onOwnerChange} onChange={this.onOwnerChange} value={this.state.owner} />\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button size=\"lg\" onClick={this.share} color=\"success\">Share</Button>\r\n                    <Button size=\"lg\" onClick={this.setWord} color=\"primary\">Play Now</Button>\r\n                </ModalFooter>\r\n            </>;\r\n        }\r\n        return (\r\n            <div>\r\n                <Modal isOpen={true} toggle={null}>\r\n                    <ModalHeader toggle={null}>{ (this.props.shareLink) ? \"Share\" : \"Enter your word\" }</ModalHeader>\r\n                    {body}\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default InputWordPopup;","import React, { Component } from 'react'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport './EndGamePopup.css';\r\n\r\nconst EndGamePopup = (props) => {\r\n    let body;\r\n    if (props.isWinner) {\r\n        body = <>\r\n            <ModalHeader>CONGRATULATIONS!!!</ModalHeader>\r\n            <ModalBody style={{ textAlign: 'center' }}>\r\n                <h3>The word is: <b>{props.word}</b></h3>\r\n                <br />\r\n                Total tries: <b>{props.failures + props.corrects}</b>\r\n                <br />\r\n                Errors: <b>{props.failures}</b>\r\n            </ModalBody>\r\n        </>;\r\n    } else {\r\n        body = <>\r\n            <ModalHeader>GAME OVER</ModalHeader>\r\n            <ModalBody style={{ textAlign: 'center' }}>\r\n                <h2>You Lose</h2>\r\n                <br />\r\n                Correct: <b>{props.corrects}</b>\r\n                <br />\r\n                Errors: <b>6</b>\r\n            </ModalBody>\r\n\r\n        </>;\r\n    }\r\n    return (\r\n        <div>\r\n            <Modal isOpen={true}>\r\n                {body}\r\n                <ModalFooter>\r\n                    <Button size=\"lg\" onClick={props.playAgain} color=\"primary\">Play Again</Button>\r\n                    <Button size=\"lg\" onClick={props.newGame} color=\"primary\">New Word</Button>\r\n                    <Button size=\"lg\" onClick={ () => props.share() } color=\"success\">Share</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default EndGamePopup;","import React, { Component } from 'react';\r\nimport { InputGroup, Button } from 'reactstrap';\r\nimport './WrongLetters.css';\r\n\r\nconst alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n\r\nclass WrongLetters extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n  \r\n  handleClick(e, index) {\r\n    if (this.props.alphabet[index] !== 0) {\r\n      e.preventDefault();\r\n    } else {\r\n      this.props.handleClick(index);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let buttons = [...alphabet].map((el, index) => {\r\n      let color = (this.props.alphabet[index] === 0) ? \"primary\" : (this.props.alphabet[index] === 1) ? \"success\" : \"danger\" ;\r\n      return <Button key={index} onClick={ (e) => this.handleClick(e, index) } className=\"letter\" color={ color } size=\"lg\">{el}</Button>;\r\n    });\r\n    return (\r\n      <div className=\"wrong-letters\">\r\n        <h3>Choose one</h3>\r\n        <InputGroup style={{ display: 'flex', justifyContent: 'center' }}>\r\n          {buttons}\r\n        </InputGroup>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default WrongLetters;\r\n","// game life cycle\r\nexport const startGame = () => ({\r\n    type: 'START_GAME'\r\n});\r\n\r\nexport const endGame = (isWinner) => ({\r\n    type: 'END_GAME',\r\n    isWinner: isWinner\r\n});\r\n\r\nexport const resetGame = () => ({\r\n    type: 'RESET_GAME'\r\n});\r\n\r\nexport const resetApp = () => ({\r\n    type: 'RESET_APP'\r\n});\r\n\r\nexport const setOwner = (owner) => ({\r\n    type: 'SET_OWNER',\r\n    owner: owner\r\n});\r\n\r\n// word actions\r\nexport const setWord = (word) => ({\r\n    type: 'SET_WORD',\r\n    word: word\r\n});\r\n\r\nexport const letterGuessed = (letter) => ({\r\n    type: 'LETTER_GUESSED',\r\n    letter: letter\r\n});\r\n\r\n// correct\r\nexport const correctLetter = (letterIndex) => ({\r\n    type: 'CORRECT_LETTER',\r\n    letterIndex: letterIndex\r\n});\r\n\r\n// failure counter\r\nexport const wrongLetter = (letterIndex) => ({\r\n    type: 'WRONG_LETTER',\r\n    letterIndex: letterIndex\r\n});","import * as firebase from 'firebase/app';\r\n\r\nimport 'firebase/database';\r\n\r\nlet config = {\r\n    apiKey: \"AIzaSyBn4qbTxWXdL3SgY6JofFwfXBMaS-W1jqc\",\r\n    authDomain: \"hangman-768d0.firebaseapp.com\",\r\n    databaseURL: \"https://hangman-768d0.firebaseio.com\",\r\n    projectId: \"hangman-768d0\",\r\n    storageBucket: \"hangman-768d0.appspot.com\",\r\n    messagingSenderId: \"728911708272\"\r\n};\r\nfirebase.initializeApp(config);\r\nlet database = firebase.database();\r\n\r\nconst writeNewGame = (id, word, owner) => {\r\n    // A game entry.\r\n    var gameData = {\r\n      id: id,\r\n      word: word,\r\n      owner: owner\r\n    };\r\n\r\n    var updates = {};\r\n    updates['/games/' + id] = gameData;\r\n  \r\n    return database.ref().update(updates);\r\n};\r\n\r\nconst getGameData = async (id) => {\r\n\r\n  let data = await firebase.database().ref('/games/' + id).once('value').then(function(snapshot) {\r\n    return snapshot.val();\r\n  });\r\n  return data;\r\n};\r\n\r\nexport { writeNewGame, getGameData };","import React, { Component } from 'react';\r\nimport NavBar from '../NavBar/';\r\nimport MainWord from '../../containers/word';\r\nimport HangMan from '../HangMan/';\r\nimport InputWordPopup from '../InputWordPopup/';\r\nimport EndGamePopup from '../EndGamePopup/';\r\nimport WrongLetters from '../WrongLetters/';\r\nimport { Container, Row, Col } from 'reactstrap';\r\n\r\n// Redux actions\r\nimport { startGame, endGame, resetGame, resetApp, setWord, setOwner, correctLetter, wrongLetter } from '../../actions/';\r\n\r\n// Firebase API\r\nimport { writeNewGame, getGameData } from '../../API';\r\n\r\nimport \"./Game.css\";\r\n\r\nconst alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\nconst MAIN_URL = \"https://tomas302.github.io/chingu-hangman/?game=\";\r\n\r\n\r\nconst getUrlVars = () => {\r\n    var vars = {};\r\n    window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m,key,value) {\r\n        vars[key] = value;\r\n    });\r\n    return vars;\r\n}\r\n\r\nclass Game extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            shareLink: ''\r\n        };\r\n\r\n        if (getUrlVars()['game']) {\r\n            this.state.shareLink = MAIN_URL+getUrlVars()['game'];\r\n        }\r\n\r\n        this.checkForShare = this.checkForShare.bind(this);\r\n        this.setWord = this.setWord.bind(this);\r\n        this.setOwner = this.setOwner.bind(this);\r\n        this.letterClicked = this.letterClicked.bind(this);\r\n        this.win = this.win.bind(this);\r\n        this.gameOver = this.gameOver.bind(this);\r\n        this.share = this.share.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.checkForShare();\r\n    }\r\n\r\n    checkForShare() {\r\n        if (this.state.shareLink !== '') {\r\n            this.props.dispatch(startGame());\r\n            getGameData(getUrlVars()['game']).then(data => {\r\n                this.setWord(data.word);\r\n                this.setOwner(data.owner);\r\n            });\r\n        }\r\n    }\r\n\r\n    setWord(word) {\r\n        if (word === '' && getUrlVars()['game'] !== '') {\r\n            this.checkForShare();\r\n            return;\r\n        }\r\n        this.props.dispatch(setWord(word.toUpperCase()));\r\n    }\r\n\r\n    setOwner(owner) {\r\n        this.props.dispatch(setOwner(owner));\r\n    }\r\n\r\n    letterClicked(index) {\r\n        if (!this.props.playing || this.props.word === '') return;\r\n        if (this.props.word.includes(alphabet[index])) {\r\n            this.props.dispatch(correctLetter(index));\r\n            let won = true;\r\n            let word = Array.from(this.props.word);\r\n            for (let i = 0; i < word.length; i++) {\r\n                let indexOfLetter = alphabet.indexOf(word[i]);\r\n                if (this.props.alphabet[indexOfLetter] !== 1) {\r\n                    if (indexOfLetter !== index) {\r\n                        won = false;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (won) {\r\n                this.win();\r\n            }\r\n        } else {\r\n            this.props.dispatch(wrongLetter(index));\r\n            if (this.props.failures === 5) {\r\n                this.gameOver();\r\n            }\r\n        }\r\n    }\r\n\r\n    win() {\r\n        this.props.dispatch(endGame(true));\r\n    }\r\n\r\n    gameOver() {\r\n        this.props.dispatch(endGame(false));\r\n    }\r\n\r\n    \r\n    share(word, owner) {\r\n        if (word === undefined) {\r\n            if (this.props.gameEnded && !this.props.playing)  {\r\n                this.props.dispatch(resetGame());\r\n            }\r\n        } else {\r\n            let id = '';\r\n            for (let i = 0; i < 6; i++) {\r\n                id = id + alphabet[Math.floor(Math.random() * alphabet.length)]\r\n            }\r\n            // here we call the firebase API to create a new link for our game settings\r\n            writeNewGame(id, word, owner).then(() => {\r\n                this.setState({\r\n                    shareLink: MAIN_URL+id\r\n                });\r\n                window.history.pushState({}, document.title, \"./?game=\" + id);\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let popup = \"\";\r\n        if (!this.props.playing && !this.props.gameEnded) {\r\n            popup = <InputWordPopup shareLink={this.state.shareLink} share={this.share} setWord={this.setWord} setOwner={this.setOwner} />;\r\n        } else if (!this.props.playing && this.props.gameEnded) {\r\n            let corrects = 0;\r\n            let uniqueLetters = [];\r\n            for (let i = this.props.word.length - 1; i >= 0; i--) {\r\n                let alreadyAdded = uniqueLetters.some(el => (el === this.props.word[i]) );\r\n                if (!alreadyAdded) {\r\n                    uniqueLetters.push(this.props.word[i]);\r\n                }\r\n            }\r\n            for (let i = 0; i < uniqueLetters.length; i++) {\r\n                let indexOfLetter = alphabet.indexOf(uniqueLetters[i]);\r\n                if (this.props.alphabet[indexOfLetter] === 1) {\r\n                    corrects++;\r\n                }\r\n            }\r\n            popup = <EndGamePopup\r\n                    playAgain={ () => { this.props.dispatch(resetGame()); this.props.dispatch(startGame()); } }\r\n                    newGame={ () => { window.history.pushState({}, document.title, \"./\"); this.setState({ shareLink: '' }); this.props.dispatch(resetApp()); } }\r\n                    share={this.share}\r\n                    word={this.props.word}\r\n                    corrects={corrects}\r\n                    failures={this.props.failures}\r\n                    isWinner={this.props.isWinner} />;\r\n        }\r\n        return <Container>\r\n            { popup }\r\n            <Row className=\"navbar-row\">\r\n                <Col xs=\"12\">\r\n                    <NavBar owner={this.props.owner} />\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col xs=\"12\" md=\"4\">\r\n                    <MainWord />\r\n                </Col>\r\n                <Col xs=\"12\" md=\"6\" >\r\n                    <HangMan failures={this.props.failures} />\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col xs=\"12\">\r\n                    <WrongLetters alphabet={this.props.alphabet} handleClick={this.letterClicked} />\r\n                </Col>\r\n            </Row>\r\n        </Container>;\r\n    }\r\n}\r\n\r\nexport default Game;","import {connect} from \"react-redux\";\r\nimport Game from '../components/Game/';\r\n\r\nfunction mapStateToProps(state){\r\n    return {\r\n        playing: state.game.playing,\r\n        gameEnded: state.game.gameEnded,\r\n        isWinner: state.game.isWinner,\r\n        owner: state.game.owner,\r\n        alphabet: state.alphabet,\r\n        word: state.word,\r\n        corrects: state.corrects,\r\n        failures: state.failures\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n    return {\r\n        dispatch\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (Game);","\r\nconst defaultState = { playing: false, gameEnded: false, isWinner: false, owner: '' };\r\n\r\nexport default function game(state = defaultState, action) {\r\n    switch(action.type) {\r\n        case('START_GAME'):\r\n            return { ...state, playing: true, isWinner: false };\r\n        case('END_GAME'):\r\n            return { ...state, playing: false, isWinner: action.isWinner, gameEnded: true };\r\n        case('SET_WORD'):\r\n            return { ...state, playing: true, isWinner: false };\r\n        case('SET_OWNER'):\r\n            return { ...state, owner: action.owner }\r\n        case('RESET_GAME'):\r\n            return { ...defaultState, owner: state.owner };\r\n        case('RESET_APP'):\r\n            return { defaultState };\r\n        default:\r\n            return state;\r\n    }\r\n};","const INITIAL = 0;\r\nconst CORRECT = 1;\r\nconst WRONG = -1;\r\n\r\nconst getDefaultState = () => {\r\n    let defaultState = [];\r\n    for (let i = 0; i < 26; i++) { defaultState.push(INITIAL) }\r\n    return defaultState;\r\n} \r\n\r\nexport default function alphabet(state = getDefaultState(), action) {\r\n    let newState;\r\n    switch(action.type) {\r\n        case('CORRECT_LETTER'):\r\n            newState = state.slice();\r\n            newState[action.letterIndex] = CORRECT;\r\n            return newState;\r\n        case('WRONG_LETTER'):\r\n            newState = state.slice();\r\n            newState[action.letterIndex] = WRONG;\r\n            return newState;\r\n        case('RESET_GAME'):\r\n            return getDefaultState();\r\n        case('RESET_APP'):\r\n            return getDefaultState();\r\n        default:\r\n            return state;\r\n    }\r\n};","import { combineReducers } from 'redux'\r\nimport game from './game';\r\nimport word from './word';\r\nimport alphabet from './alphabet';\r\nimport failures from './failure';\r\n\r\n\r\nexport default combineReducers({\r\n    game,\r\n    word,\r\n    alphabet,\r\n    failures\r\n});","export default function word(state = \"\", action) {\r\n    switch(action.type) {\r\n        case('SET_WORD'):\r\n            let regex = /((?![A-z]).)*/g;\r\n            return action.word.replace(regex, \"\");\r\n        default:\r\n            return state;\r\n    }\r\n};","export default function failure(state = 0, action) {\r\n    switch(action.type) {\r\n        case('SET_WORD'):\r\n            return 0;\r\n        case('WRONG_LETTER'):\r\n            return (state === 6) ? 6 : state + 1;\r\n        case('RESET_APP'):\r\n            return 0;\r\n        case('RESET_GAME'):\r\n            return 0;\r\n        default:\r\n            return state;\r\n    }\r\n};","import React, { Component } from 'react';\r\nimport Game from './containers/game'\r\nimport './App.css';\r\n\r\n// Redux\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport rootReducer from './reducers/';\r\n\r\nlet store = createStore(rootReducer);\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Provider store={store}>\r\n          <Game />\r\n        </Provider>\r\n        <footer>\r\n          <h3>\r\n            Coded by <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/tomas302\">tomas302</a>\r\n          </h3>\r\n        </footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}